/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`players_account_id_counts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdCountsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_heroes_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdHeroesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_histograms_field_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdHistogramsFieldGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_matches_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdMatchesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_peers_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdPeersGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_pros_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdProsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_rankings_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdRankingsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_ratings_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdRatingsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_recent_matches_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdRecentMatchesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_refresh_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdRefreshPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_totals_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdTotalsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_wardmap_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdWardmapGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_wl_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdWlGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`players_account_id_wordcloud_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PlayersAccountIdWordcloudGetError {
    UnknownValue(serde_json::Value),
}


/// Counts in categories
pub async fn players_account_id_counts_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<crate::models::PlayerCountsResponse, Error<PlayersAccountIdCountsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/counts", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdCountsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Player data
pub async fn players_account_id_get(configuration: &configuration::Configuration, account_id: i32) -> Result<crate::models::PlayerResponse, Error<PlayersAccountIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Heroes played
pub async fn players_account_id_heroes_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<Vec<crate::models::PlayerHeroesResponse>, Error<PlayersAccountIdHeroesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/heroes", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdHeroesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Distribution of matches in a single stat
pub async fn players_account_id_histograms_field_get(configuration: &configuration::Configuration, account_id: i32, field: &str, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<Vec<serde_json::Value>, Error<PlayersAccountIdHistogramsFieldGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/histograms/{field}", local_var_configuration.base_path, account_id=account_id, field=crate::apis::urlencode(field));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdHistogramsFieldGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Matches played
pub async fn players_account_id_matches_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>, project: Option<&str>) -> Result<Vec<crate::models::PlayerMatchesResponse>, Error<PlayersAccountIdMatchesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/matches", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = project {
        local_var_req_builder = local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdMatchesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Players played with
pub async fn players_account_id_peers_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<Vec<crate::models::PlayerPeersResponse>, Error<PlayersAccountIdPeersGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/peers", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdPeersGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Pro players played with
pub async fn players_account_id_pros_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<Vec<crate::models::PlayerProsResponse>, Error<PlayersAccountIdProsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/pros", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdProsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Player hero rankings
pub async fn players_account_id_rankings_get(configuration: &configuration::Configuration, account_id: i32) -> Result<Vec<crate::models::PlayerHeroRankingsResponse>, Error<PlayersAccountIdRankingsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/rankings", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdRankingsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Player rating history
pub async fn players_account_id_ratings_get(configuration: &configuration::Configuration, account_id: i32) -> Result<Vec<crate::models::PlayerRatingsResponse>, Error<PlayersAccountIdRatingsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/ratings", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdRatingsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Recent matches played
pub async fn players_account_id_recent_matches_get(configuration: &configuration::Configuration, account_id: i32) -> Result<Vec<crate::models::PlayerRecentMatchesResponse>, Error<PlayersAccountIdRecentMatchesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/recentMatches", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdRecentMatchesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Refresh player match history
pub async fn players_account_id_refresh_post(configuration: &configuration::Configuration, account_id: i32) -> Result<serde_json::Value, Error<PlayersAccountIdRefreshPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/refresh", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdRefreshPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Totals in stats
pub async fn players_account_id_totals_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<Vec<crate::models::PlayerStatsResponse>, Error<PlayersAccountIdTotalsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/totals", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdTotalsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Wards placed in matches played
pub async fn players_account_id_wardmap_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<crate::models::PlayerWardMapResponse, Error<PlayersAccountIdWardmapGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/wardmap", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdWardmapGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Win/Loss count
pub async fn players_account_id_wl_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<crate::models::PlayerWinLossResponse, Error<PlayersAccountIdWlGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/wl", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdWlGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Words said/read in matches played
pub async fn players_account_id_wordcloud_get(configuration: &configuration::Configuration, account_id: i32, limit: Option<i32>, offset: Option<i32>, win: Option<i32>, patch: Option<i32>, game_mode: Option<i32>, lobby_type: Option<i32>, region: Option<i32>, date: Option<i32>, lane_role: Option<i32>, hero_id: Option<i32>, is_radiant: Option<i32>, included_account_id: Option<i32>, excluded_account_id: Option<i32>, with_hero_id: Option<i32>, against_hero_id: Option<i32>, significant: Option<i32>, having: Option<i32>, sort: Option<&str>) -> Result<crate::models::PlayerWordCloudResponse, Error<PlayersAccountIdWordcloudGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{account_id}/wordcloud", local_var_configuration.base_path, account_id=account_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = win {
        local_var_req_builder = local_var_req_builder.query(&[("win", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = patch {
        local_var_req_builder = local_var_req_builder.query(&[("patch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = game_mode {
        local_var_req_builder = local_var_req_builder.query(&[("game_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lobby_type {
        local_var_req_builder = local_var_req_builder.query(&[("lobby_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder = local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lane_role {
        local_var_req_builder = local_var_req_builder.query(&[("lane_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_radiant {
        local_var_req_builder = local_var_req_builder.query(&[("is_radiant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = included_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("included_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = excluded_account_id {
        local_var_req_builder = local_var_req_builder.query(&[("excluded_account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("with_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = against_hero_id {
        local_var_req_builder = local_var_req_builder.query(&[("against_hero_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = significant {
        local_var_req_builder = local_var_req_builder.query(&[("significant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = having {
        local_var_req_builder = local_var_req_builder.query(&[("having", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PlayersAccountIdWordcloudGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

