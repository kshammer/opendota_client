/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InlineResponse20025 {
    /// id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// localized_name
    #[serde(rename = "localized_name", skip_serializing_if = "Option::is_none")]
    pub localized_name: Option<String>,
    /// img
    #[serde(rename = "img", skip_serializing_if = "Option::is_none")]
    pub img: Option<String>,
    /// icon
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    /// pro_win
    #[serde(rename = "pro_win", skip_serializing_if = "Option::is_none")]
    pub pro_win: Option<i32>,
    /// pro_pick
    #[serde(rename = "pro_pick", skip_serializing_if = "Option::is_none")]
    pub pro_pick: Option<i32>,
    /// The ID value of the hero played
    #[serde(rename = "hero_id", skip_serializing_if = "Option::is_none")]
    pub hero_id: Option<i32>,
    /// pro_ban
    #[serde(rename = "pro_ban", skip_serializing_if = "Option::is_none")]
    pub pro_ban: Option<i32>,
    /// Herald picks
    #[serde(rename = "1_pick", skip_serializing_if = "Option::is_none")]
    pub var_1_pick: Option<i32>,
    /// Herald wins
    #[serde(rename = "1_win", skip_serializing_if = "Option::is_none")]
    pub var_1_win: Option<i32>,
    /// Guardian picks
    #[serde(rename = "2_pick", skip_serializing_if = "Option::is_none")]
    pub var_2_pick: Option<i32>,
    /// Guardian wins
    #[serde(rename = "2_win", skip_serializing_if = "Option::is_none")]
    pub var_2_win: Option<i32>,
    /// Crusader picks
    #[serde(rename = "3_pick", skip_serializing_if = "Option::is_none")]
    pub var_3_pick: Option<i32>,
    /// Crusader wins
    #[serde(rename = "3_win", skip_serializing_if = "Option::is_none")]
    pub var_3_win: Option<i32>,
    /// Archon picks
    #[serde(rename = "4_pick", skip_serializing_if = "Option::is_none")]
    pub var_4_pick: Option<i32>,
    /// Archon wins
    #[serde(rename = "4_win", skip_serializing_if = "Option::is_none")]
    pub var_4_win: Option<i32>,
    /// Legend picks
    #[serde(rename = "5_pick", skip_serializing_if = "Option::is_none")]
    pub var_5_pick: Option<i32>,
    /// Legend wins
    #[serde(rename = "5_win", skip_serializing_if = "Option::is_none")]
    pub var_5_win: Option<i32>,
    /// Ancient picks
    #[serde(rename = "6_pick", skip_serializing_if = "Option::is_none")]
    pub var_6_pick: Option<i32>,
    /// Ancient wins
    #[serde(rename = "6_win", skip_serializing_if = "Option::is_none")]
    pub var_6_win: Option<i32>,
    /// Divine picks
    #[serde(rename = "7_pick", skip_serializing_if = "Option::is_none")]
    pub var_7_pick: Option<i32>,
    /// Divine wins
    #[serde(rename = "7_win", skip_serializing_if = "Option::is_none")]
    pub var_7_win: Option<i32>,
    /// Immortal picks
    #[serde(rename = "8_pick", skip_serializing_if = "Option::is_none")]
    pub var_8_pick: Option<i32>,
    /// Immortal wins
    #[serde(rename = "8_win", skip_serializing_if = "Option::is_none")]
    pub var_8_win: Option<i32>,
    /// Picks in Turbo mode this month
    #[serde(rename = "turbo_pick", skip_serializing_if = "Option::is_none")]
    pub turbo_pick: Option<i32>,
    /// Wins in Turbo mode this month
    #[serde(rename = "turbo_win", skip_serializing_if = "Option::is_none")]
    pub turbo_win: Option<i32>,
}

impl InlineResponse20025 {
    pub fn new() -> InlineResponse20025 {
        InlineResponse20025 {
            id: None,
            name: None,
            localized_name: None,
            img: None,
            icon: None,
            pro_win: None,
            pro_pick: None,
            hero_id: None,
            pro_ban: None,
            var_1_pick: None,
            var_1_win: None,
            var_2_pick: None,
            var_2_win: None,
            var_3_pick: None,
            var_3_win: None,
            var_4_pick: None,
            var_4_win: None,
            var_5_pick: None,
            var_5_win: None,
            var_6_pick: None,
            var_6_win: None,
            var_7_pick: None,
            var_7_win: None,
            var_8_pick: None,
            var_8_win: None,
            turbo_pick: None,
            turbo_win: None,
        }
    }
}


