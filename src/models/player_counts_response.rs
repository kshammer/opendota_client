/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PlayerCountsResponse {
    /// Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned
    #[serde(rename = "leaver_status", skip_serializing_if = "Option::is_none")]
    pub leaver_status: Option<serde_json::Value>,
    /// Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json
    #[serde(rename = "game_mode", skip_serializing_if = "Option::is_none")]
    pub game_mode: Option<serde_json::Value>,
    /// Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json
    #[serde(rename = "lobby_type", skip_serializing_if = "Option::is_none")]
    pub lobby_type: Option<serde_json::Value>,
    /// lane_role
    #[serde(rename = "lane_role", skip_serializing_if = "Option::is_none")]
    pub lane_role: Option<serde_json::Value>,
    /// Integer corresponding to the region the game was played on
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<serde_json::Value>,
    /// patch
    #[serde(rename = "patch", skip_serializing_if = "Option::is_none")]
    pub patch: Option<serde_json::Value>,
}

impl PlayerCountsResponse {
    pub fn new() -> PlayerCountsResponse {
        PlayerCountsResponse {
            leaver_status: None,
            game_mode: None,
            lobby_type: None,
            lane_role: None,
            region: None,
            patch: None,
        }
    }
}


