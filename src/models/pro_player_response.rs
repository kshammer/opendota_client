/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProPlayerResponse {
    /// Player's account identifier
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<i32>,
    /// Player's steam identifier
    #[serde(rename = "steamid", skip_serializing_if = "Option::is_none")]
    pub steamid: Option<String>,
    /// Steam picture URL (small picture)
    #[serde(rename = "avatar", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<String>,
    /// Steam picture URL (medium picture)
    #[serde(rename = "avatarmedium", skip_serializing_if = "Option::is_none")]
    pub avatarmedium: Option<String>,
    /// Steam picture URL (full picture)
    #[serde(rename = "avatarfull", skip_serializing_if = "Option::is_none")]
    pub avatarfull: Option<String>,
    /// Steam profile URL
    #[serde(rename = "profileurl", skip_serializing_if = "Option::is_none")]
    pub profileurl: Option<String>,
    /// Player's Steam name
    #[serde(rename = "personaname", skip_serializing_if = "Option::is_none")]
    pub personaname: Option<String>,
    /// Date and time of last login to OpenDota
    #[serde(rename = "last_login", skip_serializing_if = "Option::is_none")]
    pub last_login: Option<String>,
    /// Date and time of last request to refresh player's match history
    #[serde(rename = "full_history_time", skip_serializing_if = "Option::is_none")]
    pub full_history_time: Option<String>,
    /// Amount of dollars the player has donated to OpenDota
    #[serde(rename = "cheese", skip_serializing_if = "Option::is_none")]
    pub cheese: Option<i32>,
    /// Whether the refresh of player' match history failed
    #[serde(rename = "fh_unavailable", skip_serializing_if = "Option::is_none")]
    pub fh_unavailable: Option<bool>,
    /// Player's country identifier, e.g. US
    #[serde(rename = "loccountrycode", skip_serializing_if = "Option::is_none")]
    pub loccountrycode: Option<String>,
    /// Verified player name, e.g. 'Miracle-'
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Player's country code
    #[serde(rename = "country_code", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    /// Player's ingame role (core: 1 or support: 2)
    #[serde(rename = "fantasy_role", skip_serializing_if = "Option::is_none")]
    pub fantasy_role: Option<i32>,
    /// Player's team identifier
    #[serde(rename = "team_id", skip_serializing_if = "Option::is_none")]
    pub team_id: Option<i32>,
    /// Player's team name, e.g. 'Evil Geniuses'
    #[serde(rename = "team_name", skip_serializing_if = "Option::is_none")]
    pub team_name: Option<String>,
    /// Player's team shorthand tag, e.g. 'EG'
    #[serde(rename = "team_tag", skip_serializing_if = "Option::is_none")]
    pub team_tag: Option<String>,
    /// Whether the roster lock is active
    #[serde(rename = "is_locked", skip_serializing_if = "Option::is_none")]
    pub is_locked: Option<bool>,
    /// Whether the player is professional or not
    #[serde(rename = "is_pro", skip_serializing_if = "Option::is_none")]
    pub is_pro: Option<bool>,
    /// When the roster lock will end
    #[serde(rename = "locked_until", skip_serializing_if = "Option::is_none")]
    pub locked_until: Option<i32>,
}

impl ProPlayerResponse {
    pub fn new() -> ProPlayerResponse {
        ProPlayerResponse {
            account_id: None,
            steamid: None,
            avatar: None,
            avatarmedium: None,
            avatarfull: None,
            profileurl: None,
            personaname: None,
            last_login: None,
            full_history_time: None,
            cheese: None,
            fh_unavailable: None,
            loccountrycode: None,
            name: None,
            country_code: None,
            fantasy_role: None,
            team_id: None,
            team_name: None,
            team_tag: None,
            is_locked: None,
            is_pro: None,
            locked_until: None,
        }
    }
}


