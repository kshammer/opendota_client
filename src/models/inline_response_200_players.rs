/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// InlineResponse200Players : player



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InlineResponse200Players {
    /// Match ID
    #[serde(rename = "match_id", skip_serializing_if = "Option::is_none")]
    pub match_id: Option<i32>,
    /// Which slot the player is in. 0-127 are Radiant, 128-255 are Dire
    #[serde(rename = "player_slot", skip_serializing_if = "Option::is_none")]
    pub player_slot: Option<i32>,
    /// An array describing how abilities were upgraded
    #[serde(rename = "ability_upgrades_arr", skip_serializing_if = "Option::is_none")]
    pub ability_upgrades_arr: Option<Vec<i32>>,
    /// Object containing information on how many times the played used their abilities
    #[serde(rename = "ability_uses", skip_serializing_if = "Option::is_none")]
    pub ability_uses: Option<serde_json::Value>,
    /// Object containing information on who the player used their abilities on
    #[serde(rename = "ability_targets", skip_serializing_if = "Option::is_none")]
    pub ability_targets: Option<serde_json::Value>,
    /// Object containing information on how and how much damage the player dealt to other heroes
    #[serde(rename = "damage_targets", skip_serializing_if = "Option::is_none")]
    pub damage_targets: Option<serde_json::Value>,
    /// account_id
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<i32>,
    /// Object containing information on how many and what type of actions the player issued to their hero
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<serde_json::Value>,
    /// Object containing information on additional units the player had under their control
    #[serde(rename = "additional_units", skip_serializing_if = "Option::is_none")]
    pub additional_units: Option<serde_json::Value>,
    /// Number of assists the player had
    #[serde(rename = "assists", skip_serializing_if = "Option::is_none")]
    pub assists: Option<i32>,
    /// Item in backpack slot 0
    #[serde(rename = "backpack_0", skip_serializing_if = "Option::is_none")]
    pub backpack_0: Option<i32>,
    /// Item in backpack slot 1
    #[serde(rename = "backpack_1", skip_serializing_if = "Option::is_none")]
    pub backpack_1: Option<i32>,
    /// Item in backpack slot 2
    #[serde(rename = "backpack_2", skip_serializing_if = "Option::is_none")]
    pub backpack_2: Option<i32>,
    /// Array containing information about buybacks
    #[serde(rename = "buyback_log", skip_serializing_if = "Option::is_none")]
    pub buyback_log: Option<Vec<crate::models::InlineResponse200BuybackLog>>,
    /// Number of camps stacked
    #[serde(rename = "camps_stacked", skip_serializing_if = "Option::is_none")]
    pub camps_stacked: Option<i32>,
    /// Array containing information about the player's disconnections and reconnections
    #[serde(rename = "connection_log", skip_serializing_if = "Option::is_none")]
    pub connection_log: Option<Vec<crate::models::InlineResponse200ConnectionLog>>,
    /// Number of creeps stacked
    #[serde(rename = "creeps_stacked", skip_serializing_if = "Option::is_none")]
    pub creeps_stacked: Option<i32>,
    /// Object containing information about damage dealt by the player to different units
    #[serde(rename = "damage", skip_serializing_if = "Option::is_none")]
    pub damage: Option<serde_json::Value>,
    /// Object containing information about about the sources of this player's damage to heroes
    #[serde(rename = "damage_inflictor", skip_serializing_if = "Option::is_none")]
    pub damage_inflictor: Option<serde_json::Value>,
    /// Object containing information about the sources of damage received by this player from heroes
    #[serde(rename = "damage_inflictor_received", skip_serializing_if = "Option::is_none")]
    pub damage_inflictor_received: Option<serde_json::Value>,
    /// Object containing information about from whom the player took damage
    #[serde(rename = "damage_taken", skip_serializing_if = "Option::is_none")]
    pub damage_taken: Option<serde_json::Value>,
    /// Number of deaths
    #[serde(rename = "deaths", skip_serializing_if = "Option::is_none")]
    pub deaths: Option<i32>,
    /// Number of denies
    #[serde(rename = "denies", skip_serializing_if = "Option::is_none")]
    pub denies: Option<i32>,
    /// Array containing number of denies at different times of the match
    #[serde(rename = "dn_t", skip_serializing_if = "Option::is_none")]
    pub dn_t: Option<Vec<i32>>,
    /// Gold at the end of the game
    #[serde(rename = "gold", skip_serializing_if = "Option::is_none")]
    pub gold: Option<i32>,
    /// Gold Per Minute obtained by this player
    #[serde(rename = "gold_per_min", skip_serializing_if = "Option::is_none")]
    pub gold_per_min: Option<i32>,
    /// Object containing information on how the player gainined gold over the course of the match
    #[serde(rename = "gold_reasons", skip_serializing_if = "Option::is_none")]
    pub gold_reasons: Option<serde_json::Value>,
    /// How much gold the player spent
    #[serde(rename = "gold_spent", skip_serializing_if = "Option::is_none")]
    pub gold_spent: Option<i32>,
    /// Array containing total gold at different times of the match
    #[serde(rename = "gold_t", skip_serializing_if = "Option::is_none")]
    pub gold_t: Option<Vec<i32>>,
    /// Hero Damage Dealt
    #[serde(rename = "hero_damage", skip_serializing_if = "Option::is_none")]
    pub hero_damage: Option<i32>,
    /// Hero Healing Done
    #[serde(rename = "hero_healing", skip_serializing_if = "Option::is_none")]
    pub hero_healing: Option<i32>,
    /// Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors
    #[serde(rename = "hero_hits", skip_serializing_if = "Option::is_none")]
    pub hero_hits: Option<serde_json::Value>,
    /// The ID value of the hero played
    #[serde(rename = "hero_id", skip_serializing_if = "Option::is_none")]
    pub hero_id: Option<i32>,
    /// Item in the player's first slot
    #[serde(rename = "item_0", skip_serializing_if = "Option::is_none")]
    pub item_0: Option<i32>,
    /// Item in the player's second slot
    #[serde(rename = "item_1", skip_serializing_if = "Option::is_none")]
    pub item_1: Option<i32>,
    /// Item in the player's third slot
    #[serde(rename = "item_2", skip_serializing_if = "Option::is_none")]
    pub item_2: Option<i32>,
    /// Item in the player's fourth slot
    #[serde(rename = "item_3", skip_serializing_if = "Option::is_none")]
    pub item_3: Option<i32>,
    /// Item in the player's fifth slot
    #[serde(rename = "item_4", skip_serializing_if = "Option::is_none")]
    pub item_4: Option<i32>,
    /// Item in the player's sixth slot
    #[serde(rename = "item_5", skip_serializing_if = "Option::is_none")]
    pub item_5: Option<i32>,
    /// Object containing information about how many times a player used items
    #[serde(rename = "item_uses", skip_serializing_if = "Option::is_none")]
    pub item_uses: Option<serde_json::Value>,
    /// Object containing information about the player's killstreaks
    #[serde(rename = "kill_streaks", skip_serializing_if = "Option::is_none")]
    pub kill_streaks: Option<serde_json::Value>,
    /// Object containing information about what units the player killed
    #[serde(rename = "killed", skip_serializing_if = "Option::is_none")]
    pub killed: Option<serde_json::Value>,
    /// Object containing information about who killed the player
    #[serde(rename = "killed_by", skip_serializing_if = "Option::is_none")]
    pub killed_by: Option<serde_json::Value>,
    /// Number of kills
    #[serde(rename = "kills", skip_serializing_if = "Option::is_none")]
    pub kills: Option<i32>,
    /// Array containing information on which hero the player killed at what time
    #[serde(rename = "kills_log", skip_serializing_if = "Option::is_none")]
    pub kills_log: Option<Vec<crate::models::InlineResponse200KillsLog>>,
    /// Object containing information on lane position
    #[serde(rename = "lane_pos", skip_serializing_if = "Option::is_none")]
    pub lane_pos: Option<serde_json::Value>,
    /// Number of last hits
    #[serde(rename = "last_hits", skip_serializing_if = "Option::is_none")]
    pub last_hits: Option<i32>,
    /// Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned
    #[serde(rename = "leaver_status", skip_serializing_if = "Option::is_none")]
    pub leaver_status: Option<i32>,
    /// Level at the end of the game
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<i32>,
    /// Array describing last hits at each minute in the game
    #[serde(rename = "lh_t", skip_serializing_if = "Option::is_none")]
    pub lh_t: Option<Vec<i32>>,
    /// life_state
    #[serde(rename = "life_state", skip_serializing_if = "Option::is_none")]
    pub life_state: Option<serde_json::Value>,
    /// Object with information on the highest damage instance the player inflicted
    #[serde(rename = "max_hero_hit", skip_serializing_if = "Option::is_none")]
    pub max_hero_hit: Option<serde_json::Value>,
    /// Object with information on the number of the number of multikills the player had
    #[serde(rename = "multi_kills", skip_serializing_if = "Option::is_none")]
    pub multi_kills: Option<serde_json::Value>,
    /// Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192.
    #[serde(rename = "obs", skip_serializing_if = "Option::is_none")]
    pub obs: Option<serde_json::Value>,
    /// obs_left_log
    #[serde(rename = "obs_left_log", skip_serializing_if = "Option::is_none")]
    pub obs_left_log: Option<Vec<serde_json::Value>>,
    /// Object containing information on when and where the player placed observer wards
    #[serde(rename = "obs_log", skip_serializing_if = "Option::is_none")]
    pub obs_log: Option<Vec<serde_json::Value>>,
    /// Total number of observer wards placed
    #[serde(rename = "obs_placed", skip_serializing_if = "Option::is_none")]
    pub obs_placed: Option<i32>,
    /// party_id
    #[serde(rename = "party_id", skip_serializing_if = "Option::is_none")]
    pub party_id: Option<i32>,
    /// Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json
    #[serde(rename = "permanent_buffs", skip_serializing_if = "Option::is_none")]
    pub permanent_buffs: Option<Vec<serde_json::Value>>,
    /// Total number of pings
    #[serde(rename = "pings", skip_serializing_if = "Option::is_none")]
    pub pings: Option<i32>,
    /// Object containing information on the items the player purchased
    #[serde(rename = "purchase", skip_serializing_if = "Option::is_none")]
    pub purchase: Option<serde_json::Value>,
    /// Object containing information on when items were purchased
    #[serde(rename = "purchase_log", skip_serializing_if = "Option::is_none")]
    pub purchase_log: Option<Vec<crate::models::InlineResponse200PurchaseLog>>,
    /// Number of runes picked up
    #[serde(rename = "rune_pickups", skip_serializing_if = "Option::is_none")]
    pub rune_pickups: Option<i32>,
    /// Object with information about which runes the player picked up
    #[serde(rename = "runes", skip_serializing_if = "Option::is_none")]
    pub runes: Option<::std::collections::HashMap<String, i32>>,
    /// Array with information on when runes were picked up
    #[serde(rename = "runes_log", skip_serializing_if = "Option::is_none")]
    pub runes_log: Option<Vec<crate::models::InlineResponse200RunesLog>>,
    /// Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192.
    #[serde(rename = "sen", skip_serializing_if = "Option::is_none")]
    pub sen: Option<serde_json::Value>,
    /// Array containing information on when and where the player placed sentries
    #[serde(rename = "sen_left_log", skip_serializing_if = "Option::is_none")]
    pub sen_left_log: Option<Vec<serde_json::Value>>,
    /// Array with information on when and where sentries were placed by the player
    #[serde(rename = "sen_log", skip_serializing_if = "Option::is_none")]
    pub sen_log: Option<Vec<serde_json::Value>>,
    /// How many sentries were placed by the player
    #[serde(rename = "sen_placed", skip_serializing_if = "Option::is_none")]
    pub sen_placed: Option<i32>,
    /// Total stun duration of all stuns by the player
    #[serde(rename = "stuns", skip_serializing_if = "Option::is_none")]
    pub stuns: Option<f32>,
    /// Time in seconds corresponding to the time of entries of other arrays in the match.
    #[serde(rename = "times", skip_serializing_if = "Option::is_none")]
    pub times: Option<Vec<i32>>,
    /// Total tower damage done by the player
    #[serde(rename = "tower_damage", skip_serializing_if = "Option::is_none")]
    pub tower_damage: Option<i32>,
    /// Experience Per Minute obtained by the player
    #[serde(rename = "xp_per_min", skip_serializing_if = "Option::is_none")]
    pub xp_per_min: Option<i32>,
    /// Object containing information on the sources of this player's experience
    #[serde(rename = "xp_reasons", skip_serializing_if = "Option::is_none")]
    pub xp_reasons: Option<serde_json::Value>,
    /// Experience at each minute of the game
    #[serde(rename = "xp_t", skip_serializing_if = "Option::is_none")]
    pub xp_t: Option<Vec<i32>>,
    /// personaname
    #[serde(rename = "personaname", skip_serializing_if = "Option::is_none")]
    pub personaname: Option<String>,
    /// name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Time of player's last login
    #[serde(rename = "last_login", skip_serializing_if = "Option::is_none")]
    pub last_login: Option<String>,
    /// Boolean indicating whether Radiant won the match
    #[serde(rename = "radiant_win", skip_serializing_if = "Option::is_none")]
    pub radiant_win: Option<bool>,
    /// Start time of the match in seconds since 1970
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i32>,
    /// Duration of the game in seconds
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// cluster
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<i32>,
    /// Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json
    #[serde(rename = "lobby_type", skip_serializing_if = "Option::is_none")]
    pub lobby_type: Option<i32>,
    /// Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json
    #[serde(rename = "game_mode", skip_serializing_if = "Option::is_none")]
    pub game_mode: Option<i32>,
    /// Integer representing the patch the game was played on
    #[serde(rename = "patch", skip_serializing_if = "Option::is_none")]
    pub patch: Option<i32>,
    /// Integer corresponding to the region the game was played on
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<i32>,
    /// Boolean for whether or not the player is on Radiant
    #[serde(rename = "isRadiant", skip_serializing_if = "Option::is_none")]
    pub is_radiant: Option<bool>,
    /// Binary integer representing whether or not the player won
    #[serde(rename = "win", skip_serializing_if = "Option::is_none")]
    pub win: Option<i32>,
    /// Binary integer representing whether or not the player lost
    #[serde(rename = "lose", skip_serializing_if = "Option::is_none")]
    pub lose: Option<i32>,
    /// Total gold at the end of the game
    #[serde(rename = "total_gold", skip_serializing_if = "Option::is_none")]
    pub total_gold: Option<i32>,
    /// Total experience at the end of the game
    #[serde(rename = "total_xp", skip_serializing_if = "Option::is_none")]
    pub total_xp: Option<i32>,
    /// Number of kills per minute
    #[serde(rename = "kills_per_min", skip_serializing_if = "Option::is_none")]
    pub kills_per_min: Option<f32>,
    /// kda
    #[serde(rename = "kda", skip_serializing_if = "Option::is_none")]
    pub kda: Option<f32>,
    /// abandons
    #[serde(rename = "abandons", skip_serializing_if = "Option::is_none")]
    pub abandons: Option<i32>,
    /// Total number of neutral creeps killed
    #[serde(rename = "neutral_kills", skip_serializing_if = "Option::is_none")]
    pub neutral_kills: Option<i32>,
    /// Total number of tower kills the player had
    #[serde(rename = "tower_kills", skip_serializing_if = "Option::is_none")]
    pub tower_kills: Option<i32>,
    /// Total number of courier kills the player had
    #[serde(rename = "courier_kills", skip_serializing_if = "Option::is_none")]
    pub courier_kills: Option<i32>,
    /// Total number of lane creeps killed by the player
    #[serde(rename = "lane_kills", skip_serializing_if = "Option::is_none")]
    pub lane_kills: Option<i32>,
    /// Total number of heroes killed by the player
    #[serde(rename = "hero_kills", skip_serializing_if = "Option::is_none")]
    pub hero_kills: Option<i32>,
    /// Total number of observer wards killed by the player
    #[serde(rename = "observer_kills", skip_serializing_if = "Option::is_none")]
    pub observer_kills: Option<i32>,
    /// Total number of sentry wards killed by the player
    #[serde(rename = "sentry_kills", skip_serializing_if = "Option::is_none")]
    pub sentry_kills: Option<i32>,
    /// Total number of roshan kills (last hit on roshan) the player had
    #[serde(rename = "roshan_kills", skip_serializing_if = "Option::is_none")]
    pub roshan_kills: Option<i32>,
    /// Total number of Necronomicon creeps killed by the player
    #[serde(rename = "necronomicon_kills", skip_serializing_if = "Option::is_none")]
    pub necronomicon_kills: Option<i32>,
    /// Total number of Ancient creeps killed by the player
    #[serde(rename = "ancient_kills", skip_serializing_if = "Option::is_none")]
    pub ancient_kills: Option<i32>,
    /// Total number of buyback the player used
    #[serde(rename = "buyback_count", skip_serializing_if = "Option::is_none")]
    pub buyback_count: Option<i32>,
    /// Number of observer wards used
    #[serde(rename = "observer_uses", skip_serializing_if = "Option::is_none")]
    pub observer_uses: Option<i32>,
    /// Number of sentry wards used
    #[serde(rename = "sentry_uses", skip_serializing_if = "Option::is_none")]
    pub sentry_uses: Option<i32>,
    /// lane_efficiency
    #[serde(rename = "lane_efficiency", skip_serializing_if = "Option::is_none")]
    pub lane_efficiency: Option<f32>,
    /// lane_efficiency_pct
    #[serde(rename = "lane_efficiency_pct", skip_serializing_if = "Option::is_none")]
    pub lane_efficiency_pct: Option<f32>,
    /// Integer referring to which lane the hero laned in
    #[serde(rename = "lane", skip_serializing_if = "Option::is_none")]
    pub lane: Option<i32>,
    /// lane_role
    #[serde(rename = "lane_role", skip_serializing_if = "Option::is_none")]
    pub lane_role: Option<i32>,
    /// Boolean referring to whether or not the player roamed
    #[serde(rename = "is_roaming", skip_serializing_if = "Option::is_none")]
    pub is_roaming: Option<bool>,
    /// Object with information on when the player last purchased an item
    #[serde(rename = "purchase_time", skip_serializing_if = "Option::is_none")]
    pub purchase_time: Option<serde_json::Value>,
    /// Object with information on when the player first puchased an item
    #[serde(rename = "first_purchase_time", skip_serializing_if = "Option::is_none")]
    pub first_purchase_time: Option<serde_json::Value>,
    /// Object with information on whether or not the item won
    #[serde(rename = "item_win", skip_serializing_if = "Option::is_none")]
    pub item_win: Option<serde_json::Value>,
    /// Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1)
    #[serde(rename = "item_usage", skip_serializing_if = "Option::is_none")]
    pub item_usage: Option<serde_json::Value>,
    /// Total number of TP scrolls purchased by the player
    #[serde(rename = "purchase_tpscroll", skip_serializing_if = "Option::is_none")]
    pub purchase_tpscroll: Option<serde_json::Value>,
    /// Actions per minute
    #[serde(rename = "actions_per_min", skip_serializing_if = "Option::is_none")]
    pub actions_per_min: Option<i32>,
    /// life_state_dead
    #[serde(rename = "life_state_dead", skip_serializing_if = "Option::is_none")]
    pub life_state_dead: Option<i32>,
    /// The rank tier of the player. Tens place indicates rank, ones place indicates stars.
    #[serde(rename = "rank_tier", skip_serializing_if = "Option::is_none")]
    pub rank_tier: Option<i32>,
    /// cosmetics
    #[serde(rename = "cosmetics", skip_serializing_if = "Option::is_none")]
    pub cosmetics: Option<Vec<i32>>,
    /// Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc
    #[serde(rename = "benchmarks", skip_serializing_if = "Option::is_none")]
    pub benchmarks: Option<serde_json::Value>,
}

impl InlineResponse200Players {
    /// player
    pub fn new() -> InlineResponse200Players {
        InlineResponse200Players {
            match_id: None,
            player_slot: None,
            ability_upgrades_arr: None,
            ability_uses: None,
            ability_targets: None,
            damage_targets: None,
            account_id: None,
            actions: None,
            additional_units: None,
            assists: None,
            backpack_0: None,
            backpack_1: None,
            backpack_2: None,
            buyback_log: None,
            camps_stacked: None,
            connection_log: None,
            creeps_stacked: None,
            damage: None,
            damage_inflictor: None,
            damage_inflictor_received: None,
            damage_taken: None,
            deaths: None,
            denies: None,
            dn_t: None,
            gold: None,
            gold_per_min: None,
            gold_reasons: None,
            gold_spent: None,
            gold_t: None,
            hero_damage: None,
            hero_healing: None,
            hero_hits: None,
            hero_id: None,
            item_0: None,
            item_1: None,
            item_2: None,
            item_3: None,
            item_4: None,
            item_5: None,
            item_uses: None,
            kill_streaks: None,
            killed: None,
            killed_by: None,
            kills: None,
            kills_log: None,
            lane_pos: None,
            last_hits: None,
            leaver_status: None,
            level: None,
            lh_t: None,
            life_state: None,
            max_hero_hit: None,
            multi_kills: None,
            obs: None,
            obs_left_log: None,
            obs_log: None,
            obs_placed: None,
            party_id: None,
            permanent_buffs: None,
            pings: None,
            purchase: None,
            purchase_log: None,
            rune_pickups: None,
            runes: None,
            runes_log: None,
            sen: None,
            sen_left_log: None,
            sen_log: None,
            sen_placed: None,
            stuns: None,
            times: None,
            tower_damage: None,
            xp_per_min: None,
            xp_reasons: None,
            xp_t: None,
            personaname: None,
            name: None,
            last_login: None,
            radiant_win: None,
            start_time: None,
            duration: None,
            cluster: None,
            lobby_type: None,
            game_mode: None,
            patch: None,
            region: None,
            is_radiant: None,
            win: None,
            lose: None,
            total_gold: None,
            total_xp: None,
            kills_per_min: None,
            kda: None,
            abandons: None,
            neutral_kills: None,
            tower_kills: None,
            courier_kills: None,
            lane_kills: None,
            hero_kills: None,
            observer_kills: None,
            sentry_kills: None,
            roshan_kills: None,
            necronomicon_kills: None,
            ancient_kills: None,
            buyback_count: None,
            observer_uses: None,
            sentry_uses: None,
            lane_efficiency: None,
            lane_efficiency_pct: None,
            lane: None,
            lane_role: None,
            is_roaming: None,
            purchase_time: None,
            first_purchase_time: None,
            item_win: None,
            item_usage: None,
            purchase_tpscroll: None,
            actions_per_min: None,
            life_state_dead: None,
            rank_tier: None,
            cosmetics: None,
            benchmarks: None,
        }
    }
}


