/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MatchResponse {
    /// The ID number of the match assigned by Valve
    #[serde(rename = "match_id", skip_serializing_if = "Option::is_none")]
    pub match_id: Option<i32>,
    /// Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.
    #[serde(rename = "barracks_status_dire", skip_serializing_if = "Option::is_none")]
    pub barracks_status_dire: Option<i32>,
    /// Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.
    #[serde(rename = "barracks_status_radiant", skip_serializing_if = "Option::is_none")]
    pub barracks_status_radiant: Option<i32>,
    /// Array containing information on the chat of the game
    #[serde(rename = "chat", skip_serializing_if = "Option::is_none")]
    pub chat: Option<Vec<crate::models::MatchResponseChat>>,
    /// cluster
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<i32>,
    /// cosmetics
    #[serde(rename = "cosmetics", skip_serializing_if = "Option::is_none")]
    pub cosmetics: Option<serde_json::Value>,
    /// Final score for Dire (number of kills on Radiant)
    #[serde(rename = "dire_score", skip_serializing_if = "Option::is_none")]
    pub dire_score: Option<i32>,
    /// draft_timings
    #[serde(rename = "draft_timings", skip_serializing_if = "Option::is_none")]
    pub draft_timings: Option<Vec<crate::models::MatchResponseDraftTimings>>,
    /// Duration of the game in seconds
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// engine
    #[serde(rename = "engine", skip_serializing_if = "Option::is_none")]
    pub engine: Option<i32>,
    /// Time in seconds at which first blood occurred
    #[serde(rename = "first_blood_time", skip_serializing_if = "Option::is_none")]
    pub first_blood_time: Option<i32>,
    /// Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json
    #[serde(rename = "game_mode", skip_serializing_if = "Option::is_none")]
    pub game_mode: Option<i32>,
    /// Number of human players in the game
    #[serde(rename = "human_players", skip_serializing_if = "Option::is_none")]
    pub human_players: Option<i32>,
    /// leagueid
    #[serde(rename = "leagueid", skip_serializing_if = "Option::is_none")]
    pub leagueid: Option<i32>,
    /// Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json
    #[serde(rename = "lobby_type", skip_serializing_if = "Option::is_none")]
    pub lobby_type: Option<i32>,
    /// match_seq_num
    #[serde(rename = "match_seq_num", skip_serializing_if = "Option::is_none")]
    pub match_seq_num: Option<i32>,
    /// Number of negative votes the replay received in the in-game client
    #[serde(rename = "negative_votes", skip_serializing_if = "Option::is_none")]
    pub negative_votes: Option<i32>,
    /// objectives
    #[serde(rename = "objectives", skip_serializing_if = "Option::is_none")]
    pub objectives: Option<serde_json::Value>,
    /// Object containing information on the draft. Each pick/ban contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order.
    #[serde(rename = "picks_bans", skip_serializing_if = "Option::is_none")]
    pub picks_bans: Option<serde_json::Value>,
    /// Number of positive votes the replay received in the in-game client
    #[serde(rename = "positive_votes", skip_serializing_if = "Option::is_none")]
    pub positive_votes: Option<i32>,
    /// Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. 
    #[serde(rename = "radiant_gold_adv", skip_serializing_if = "Option::is_none")]
    pub radiant_gold_adv: Option<serde_json::Value>,
    /// Final score for Radiant (number of kills on Radiant)
    #[serde(rename = "radiant_score", skip_serializing_if = "Option::is_none")]
    pub radiant_score: Option<i32>,
    /// Boolean indicating whether Radiant won the match
    #[serde(rename = "radiant_win", skip_serializing_if = "Option::is_none")]
    pub radiant_win: Option<bool>,
    /// Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. 
    #[serde(rename = "radiant_xp_adv", skip_serializing_if = "Option::is_none")]
    pub radiant_xp_adv: Option<serde_json::Value>,
    /// The Unix timestamp at which the game started
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i32>,
    /// teamfights
    #[serde(rename = "teamfights", skip_serializing_if = "Option::is_none")]
    pub teamfights: Option<serde_json::Value>,
    /// Bitmask. An integer that represents a binary of which Dire towers are still standing.
    #[serde(rename = "tower_status_dire", skip_serializing_if = "Option::is_none")]
    pub tower_status_dire: Option<i32>,
    /// Bitmask. An integer that represents a binary of which Radiant towers are still standing.
    #[serde(rename = "tower_status_radiant", skip_serializing_if = "Option::is_none")]
    pub tower_status_radiant: Option<i32>,
    /// Parse version, used internally by OpenDota
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    /// replay_salt
    #[serde(rename = "replay_salt", skip_serializing_if = "Option::is_none")]
    pub replay_salt: Option<i32>,
    /// series_id
    #[serde(rename = "series_id", skip_serializing_if = "Option::is_none")]
    pub series_id: Option<i32>,
    /// series_type
    #[serde(rename = "series_type", skip_serializing_if = "Option::is_none")]
    pub series_type: Option<i32>,
    /// radiant_team
    #[serde(rename = "radiant_team", skip_serializing_if = "Option::is_none")]
    pub radiant_team: Option<serde_json::Value>,
    /// dire_team
    #[serde(rename = "dire_team", skip_serializing_if = "Option::is_none")]
    pub dire_team: Option<serde_json::Value>,
    /// league
    #[serde(rename = "league", skip_serializing_if = "Option::is_none")]
    pub league: Option<serde_json::Value>,
    /// Skill bracket assigned by Valve (Normal, High, Very High)
    #[serde(rename = "skill", skip_serializing_if = "Option::is_none")]
    pub skill: Option<i32>,
    /// Array of information on individual players
    #[serde(rename = "players", skip_serializing_if = "Option::is_none")]
    pub players: Option<Vec<crate::models::MatchResponsePlayers>>,
    /// Information on the patch version the game is played on
    #[serde(rename = "patch", skip_serializing_if = "Option::is_none")]
    pub patch: Option<i32>,
    /// Integer corresponding to the region the game was played on
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<i32>,
    /// Word counts of the all chat messages in the player's games
    #[serde(rename = "all_word_counts", skip_serializing_if = "Option::is_none")]
    pub all_word_counts: Option<serde_json::Value>,
    /// Word counts of the player's all chat messages
    #[serde(rename = "my_word_counts", skip_serializing_if = "Option::is_none")]
    pub my_word_counts: Option<serde_json::Value>,
    /// Maximum gold advantage of the player's team if they lost the match
    #[serde(rename = "throw", skip_serializing_if = "Option::is_none")]
    pub throw: Option<i32>,
    /// Maximum gold disadvantage of the player's team if they won the match
    #[serde(rename = "comeback", skip_serializing_if = "Option::is_none")]
    pub comeback: Option<i32>,
    /// Maximum gold disadvantage of the player's team if they lost the match
    #[serde(rename = "loss", skip_serializing_if = "Option::is_none")]
    pub loss: Option<i32>,
    /// Maximum gold advantage of the player's team if they won the match
    #[serde(rename = "win", skip_serializing_if = "Option::is_none")]
    pub win: Option<i32>,
    /// replay_url
    #[serde(rename = "replay_url", skip_serializing_if = "Option::is_none")]
    pub replay_url: Option<String>,
}

impl MatchResponse {
    pub fn new() -> MatchResponse {
        MatchResponse {
            match_id: None,
            barracks_status_dire: None,
            barracks_status_radiant: None,
            chat: None,
            cluster: None,
            cosmetics: None,
            dire_score: None,
            draft_timings: None,
            duration: None,
            engine: None,
            first_blood_time: None,
            game_mode: None,
            human_players: None,
            leagueid: None,
            lobby_type: None,
            match_seq_num: None,
            negative_votes: None,
            objectives: None,
            picks_bans: None,
            positive_votes: None,
            radiant_gold_adv: None,
            radiant_score: None,
            radiant_win: None,
            radiant_xp_adv: None,
            start_time: None,
            teamfights: None,
            tower_status_dire: None,
            tower_status_radiant: None,
            version: None,
            replay_salt: None,
            series_id: None,
            series_type: None,
            radiant_team: None,
            dire_team: None,
            league: None,
            skill: None,
            players: None,
            patch: None,
            region: None,
            all_word_counts: None,
            my_word_counts: None,
            throw: None,
            comeback: None,
            loss: None,
            win: None,
            replay_url: None,
        }
    }
}


