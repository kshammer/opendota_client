/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// RankingsResponseRankings : rankings



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RankingsResponseRankings {
    /// account_id
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<i32>,
    /// score
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<String>,
    /// steamid
    #[serde(rename = "steamid", skip_serializing_if = "Option::is_none")]
    pub steamid: Option<String>,
    /// avatar
    #[serde(rename = "avatar", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<String>,
    /// avatarmedium
    #[serde(rename = "avatarmedium", skip_serializing_if = "Option::is_none")]
    pub avatarmedium: Option<String>,
    /// avatarfull
    #[serde(rename = "avatarfull", skip_serializing_if = "Option::is_none")]
    pub avatarfull: Option<String>,
    /// profileurl
    #[serde(rename = "profileurl", skip_serializing_if = "Option::is_none")]
    pub profileurl: Option<String>,
    /// personaname
    #[serde(rename = "personaname", skip_serializing_if = "Option::is_none")]
    pub personaname: Option<String>,
    /// last_login
    #[serde(rename = "last_login", skip_serializing_if = "Option::is_none")]
    pub last_login: Option<String>,
    /// full_history_time
    #[serde(rename = "full_history_time", skip_serializing_if = "Option::is_none")]
    pub full_history_time: Option<String>,
    /// cheese
    #[serde(rename = "cheese", skip_serializing_if = "Option::is_none")]
    pub cheese: Option<i32>,
    /// fh_unavailable
    #[serde(rename = "fh_unavailable", skip_serializing_if = "Option::is_none")]
    pub fh_unavailable: Option<bool>,
    /// loccountrycode
    #[serde(rename = "loccountrycode", skip_serializing_if = "Option::is_none")]
    pub loccountrycode: Option<String>,
    /// rank_tier
    #[serde(rename = "rank_tier", skip_serializing_if = "Option::is_none")]
    pub rank_tier: Option<i32>,
}

impl RankingsResponseRankings {
    /// rankings
    pub fn new() -> RankingsResponseRankings {
        RankingsResponseRankings {
            account_id: None,
            score: None,
            steamid: None,
            avatar: None,
            avatarmedium: None,
            avatarfull: None,
            profileurl: None,
            personaname: None,
            last_login: None,
            full_history_time: None,
            cheese: None,
            fh_unavailable: None,
            loccountrycode: None,
            rank_tier: None,
        }
    }
}


