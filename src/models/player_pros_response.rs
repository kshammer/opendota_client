/*
 * OpenDota API
 *
 * # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PlayerProsResponse {
    /// account_id
    #[serde(rename = "account_id", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<i32>,
    /// name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// country_code
    #[serde(rename = "country_code", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    /// fantasy_role
    #[serde(rename = "fantasy_role", skip_serializing_if = "Option::is_none")]
    pub fantasy_role: Option<i32>,
    /// team_id
    #[serde(rename = "team_id", skip_serializing_if = "Option::is_none")]
    pub team_id: Option<i32>,
    /// team_name
    #[serde(rename = "team_name", skip_serializing_if = "Option::is_none")]
    pub team_name: Option<String>,
    /// team_tag
    #[serde(rename = "team_tag", skip_serializing_if = "Option::is_none")]
    pub team_tag: Option<String>,
    /// is_locked
    #[serde(rename = "is_locked", skip_serializing_if = "Option::is_none")]
    pub is_locked: Option<bool>,
    /// is_pro
    #[serde(rename = "is_pro", skip_serializing_if = "Option::is_none")]
    pub is_pro: Option<bool>,
    /// locked_until
    #[serde(rename = "locked_until", skip_serializing_if = "Option::is_none")]
    pub locked_until: Option<i32>,
    /// steamid
    #[serde(rename = "steamid", skip_serializing_if = "Option::is_none")]
    pub steamid: Option<String>,
    /// avatar
    #[serde(rename = "avatar", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<String>,
    /// avatarmedium
    #[serde(rename = "avatarmedium", skip_serializing_if = "Option::is_none")]
    pub avatarmedium: Option<String>,
    /// avatarfull
    #[serde(rename = "avatarfull", skip_serializing_if = "Option::is_none")]
    pub avatarfull: Option<String>,
    /// profileurl
    #[serde(rename = "profileurl", skip_serializing_if = "Option::is_none")]
    pub profileurl: Option<String>,
    /// last_login
    #[serde(rename = "last_login", skip_serializing_if = "Option::is_none")]
    pub last_login: Option<String>,
    /// full_history_time
    #[serde(rename = "full_history_time", skip_serializing_if = "Option::is_none")]
    pub full_history_time: Option<String>,
    /// cheese
    #[serde(rename = "cheese", skip_serializing_if = "Option::is_none")]
    pub cheese: Option<i32>,
    /// fh_unavailable
    #[serde(rename = "fh_unavailable", skip_serializing_if = "Option::is_none")]
    pub fh_unavailable: Option<bool>,
    /// loccountrycode
    #[serde(rename = "loccountrycode", skip_serializing_if = "Option::is_none")]
    pub loccountrycode: Option<String>,
    /// last_played
    #[serde(rename = "last_played", skip_serializing_if = "Option::is_none")]
    pub last_played: Option<i32>,
    /// win
    #[serde(rename = "win", skip_serializing_if = "Option::is_none")]
    pub win: Option<i32>,
    /// games
    #[serde(rename = "games", skip_serializing_if = "Option::is_none")]
    pub games: Option<i32>,
    /// with_win
    #[serde(rename = "with_win", skip_serializing_if = "Option::is_none")]
    pub with_win: Option<i32>,
    /// with_games
    #[serde(rename = "with_games", skip_serializing_if = "Option::is_none")]
    pub with_games: Option<i32>,
    /// against_win
    #[serde(rename = "against_win", skip_serializing_if = "Option::is_none")]
    pub against_win: Option<i32>,
    /// against_games
    #[serde(rename = "against_games", skip_serializing_if = "Option::is_none")]
    pub against_games: Option<i32>,
    /// with_gpm_sum
    #[serde(rename = "with_gpm_sum", skip_serializing_if = "Option::is_none")]
    pub with_gpm_sum: Option<i32>,
    /// with_xpm_sum
    #[serde(rename = "with_xpm_sum", skip_serializing_if = "Option::is_none")]
    pub with_xpm_sum: Option<i32>,
}

impl PlayerProsResponse {
    pub fn new() -> PlayerProsResponse {
        PlayerProsResponse {
            account_id: None,
            name: None,
            country_code: None,
            fantasy_role: None,
            team_id: None,
            team_name: None,
            team_tag: None,
            is_locked: None,
            is_pro: None,
            locked_until: None,
            steamid: None,
            avatar: None,
            avatarmedium: None,
            avatarfull: None,
            profileurl: None,
            last_login: None,
            full_history_time: None,
            cheese: None,
            fh_unavailable: None,
            loccountrycode: None,
            last_played: None,
            win: None,
            games: None,
            with_win: None,
            with_games: None,
            against_win: None,
            against_games: None,
            with_gpm_sum: None,
            with_xpm_sum: None,
        }
    }
}


